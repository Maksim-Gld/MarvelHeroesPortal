{"version":3,"file":"static/js/895.d5184166.chunk.js","mappings":"sLAEA,MAMA,EANqBA,KAEbC,EAAAA,EAAAA,KAAA,OAAKC,MAAO,CAAEC,QAAS,QAASC,MAAO,QAASC,OAAQ,QAASC,UAAW,UAAWC,OAAQ,UAAYC,IAAKC,EAAKC,IAAI,S,8JCIjI,MAmDMC,EAAOC,IAAe,IAAd,KAAEC,GAAMD,EAClB,MAAM,KAAEE,EAAI,YAAEC,EAAW,UAAEC,EAAS,gBAAEC,EAAe,SAAEC,EAAQ,KAAEC,GAASN,EAE1E,OACIO,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBC,SAAA,EAC9BrB,EAAAA,EAAAA,KAAA,OAAKO,IAAKQ,EAAWd,MAAOe,EAAiBP,IAAI,mBAAmBW,UAAU,qBAC9ED,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAC7BrB,EAAAA,EAAAA,KAAA,KAAGoB,UAAU,mBAAkBC,SAAER,KACjCb,EAAAA,EAAAA,KAAA,KAAGoB,UAAU,oBAAmBC,SAC3BP,KAELK,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAC7BrB,EAAAA,EAAAA,KAAA,KAAGsB,KAAML,EAAUG,UAAU,sBAAqBC,UAC9CrB,EAAAA,EAAAA,KAAA,OAAKoB,UAAU,QAAOC,SAAC,gBAE3BrB,EAAAA,EAAAA,KAAA,KAAGsB,KAAMJ,EAAME,UAAU,2BAA0BC,UAC/CrB,EAAAA,EAAAA,KAAA,OAAKoB,UAAU,QAAOC,SAAC,mBAIjC,EAId,EA3EmBE,KACf,MAAOX,EAAMY,IAAWC,EAAAA,EAAAA,UAAS,CAAC,IAC5B,QAAEC,EAAO,MAAEC,EAAK,aAAEC,EAAY,WAAEC,IAAeC,EAAAA,EAAAA,MAErDC,EAAAA,EAAAA,YAAU,KACNC,IACA,MAAMC,EAAUC,YAAYF,EAAY,KAExC,MAAO,KACHG,cAAcF,EAAQ,CACzB,GACF,IAGH,MAAMG,EAAgBxB,IAClBY,EAAQZ,EAAK,EAGXoB,EAAaA,KACfH,IACA,MAAMQ,EAAKC,KAAKC,MAAmB,IAAbD,KAAKE,SAAiC,QAC5DZ,EAAaS,GACRI,KAAKL,EAAa,EAGrBM,EAAef,GAAQ3B,EAAAA,EAAAA,KAACD,EAAAA,EAAY,IAAM,KAC1C4C,EAAUjB,GAAU1B,EAAAA,EAAAA,KAAC4C,EAAAA,EAAO,IAAM,KAClCC,EAAYnB,GAAWC,EAAgC,MAAvB3B,EAAAA,EAAAA,KAACU,EAAI,CAACE,KAAMA,IAElD,OACIO,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,CACtBqB,EACAC,EACAE,GACD1B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qBAAoBC,SAAA,EAC/BF,EAAAA,EAAAA,MAAA,KAAGC,UAAU,oBAAmBC,SAAA,CAAC,+BACFrB,EAAAA,EAAAA,KAAA,SAAM,6CAGrCA,EAAAA,EAAAA,KAAA,KAAGoB,UAAU,oBAAmBC,SAAC,2BAGjCrB,EAAAA,EAAAA,KAAA,UAAQ8C,QAASd,EAAYZ,UAAU,sBAAqBC,UACxDrB,EAAAA,EAAAA,KAAA,OAAKoB,UAAU,QAAOC,SAAC,cAE3BrB,EAAAA,EAAAA,KAAA,OAAKO,IAAKwC,EAAStC,IAAI,UAAUW,UAAU,gCAE7C,ECqDd,EArGkB4B,IAEd,MAAOC,EAAUC,IAAezB,EAAAA,EAAAA,UAAS,KAClC0B,EAAgBC,IAAqB3B,EAAAA,EAAAA,WAAS,IAC9C4B,EAAQC,IAAa7B,EAAAA,EAAAA,UAAS,MAC9B8B,EAAWC,IAAgB/B,EAAAA,EAAAA,WAAS,IAErC,QAAEC,EAAO,MAAEC,EAAK,iBAAE8B,IAAqB3B,EAAAA,EAAAA,MAE7CC,EAAAA,EAAAA,YAAU,KACN2B,EAAUL,GAAQ,EAAK,GACxB,IAEH,MAAMK,EAAYA,CAACL,EAAQM,KACbP,GAAVO,GACAF,EAAiBJ,GACZZ,KAAKmB,EAAiB,EAGzBA,EAAoBC,IACtB,IAAIC,GAAQ,EACRD,EAAYE,OAAS,IACrBD,GAAQ,GAGZZ,GAAYD,GAAY,IAAIA,KAAaY,KAEzCT,GAAkBD,IAAkB,IACpCG,GAAUD,GAAUA,EAAS,IAC7BG,GAAaD,GAAaO,GAAM,EAG9BE,GAAWC,EAAAA,EAAAA,QAAO,IAElBC,EAAe7B,IACjB2B,EAASG,QAAQC,SAAQC,GAAQA,EAAKC,UAAUC,OAAO,yBACvDP,EAASG,QAAQ9B,GAAIiC,UAAUE,IAAI,uBACnCR,EAASG,QAAQ9B,GAAIoC,OAAO,EAuChC,MAAMC,EApCN,SAAqBC,GACjB,MAAMD,EAAQC,EAAIC,KAAI,CAACP,EAAMQ,KACzB,IAAIC,EAAW,CAAE,UAAa,SAK9B,MAJuB,wEAAnBT,EAAKtD,YACL+D,EAAW,CAAE,UAAa,WAI1B3D,EAAAA,EAAAA,MAAA,MACIC,UAAU,aACV2D,SAAU,EACVC,IAAKC,GAAMjB,EAASG,QAAQU,GAAKI,EAEjCnC,QAASA,KACLE,EAAMkC,eAAeb,EAAKhC,IAC1B6B,EAAYW,EAAE,EAElBM,WAAaC,IACK,MAAVA,EAAEC,KAAyB,UAAVD,EAAEC,MACnBrC,EAAMkC,eAAeb,EAAKhC,IAC1B6B,EAAYW,GAChB,EACFxD,SAAA,EACFrB,EAAAA,EAAAA,KAAA,OAAKO,IAAK8D,EAAKtD,UAAWN,IAAK4D,EAAKxD,KAAMZ,MAAO6E,KACjD9E,EAAAA,EAAAA,KAAA,OAAKoB,UAAU,aAAYC,SAAEgD,EAAKxD,SAZ7BwD,EAAKhC,GAaT,IAIb,OACIrC,EAAAA,EAAAA,KAAA,MAAIoB,UAAU,aAAYC,SACrBqD,GAGb,CAEcY,CAAYrC,GAEpBP,EAAef,GAAQ3B,EAAAA,EAAAA,KAACD,EAAAA,EAAY,IAAM,KAC1C4C,EAAUjB,IAAYyB,GAAiBnD,EAAAA,EAAAA,KAAC4C,EAAAA,EAAO,IAAM,KAE3D,OACIzB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,CACtBqB,EACAC,EACA+B,GACD1E,EAAAA,EAAAA,KAAA,UACIoB,UAAU,mCACVmE,SAAUpC,EACVlD,MAAO,CAAE,QAAWsD,EAAY,OAAS,SACzCT,QAASA,IAAMY,EAAUL,GAAQhC,UACjCrB,EAAAA,EAAAA,KAAA,OAAKoB,UAAU,QAAOC,SAAC,kBAEzB,ECjFd,EAjBiBmE,KAETrE,EAAAA,EAAAA,MAAAsE,EAAAA,SAAA,CAAApE,SAAA,EACIrB,EAAAA,EAAAA,KAAA,KAAGoB,UAAU,eAAcC,SAAC,kDAC5BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAUC,SAAA,EACrBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yBAAwBC,SAAA,EACnCrB,EAAAA,EAAAA,KAAA,OAAKoB,UAAU,4BACfpB,EAAAA,EAAAA,KAAA,OAAKoB,UAAU,6BAEnBpB,EAAAA,EAAAA,KAAA,OAAKoB,UAAU,2BACfpB,EAAAA,EAAAA,KAAA,OAAKoB,UAAU,2BACfpB,EAAAA,EAAAA,KAAA,OAAKoB,UAAU,gCCoCzBV,EAAOC,IAAe,IAAd,KAAEC,GAAMD,EAClB,MAAM,KAAEE,EAAI,YAAEC,EAAW,UAAEC,EAAS,SAAEE,EAAQ,KAAEC,EAAI,OAAEwE,GAAW9E,EACjE,IAAIkE,EAAW,CAAE,UAAa,SAK9B,MAJkB,wEAAd/D,IACA+D,EAAW,CAAE,UAAa,WAI1B3D,EAAAA,EAAAA,MAAAsE,EAAAA,SAAA,CAAApE,SAAA,EACIF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EACzBrB,EAAAA,EAAAA,KAAA,OAAKO,IAAKQ,EAAWN,IAAKI,EAAMZ,MAAO6E,KACvC3D,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACIrB,EAAAA,EAAAA,KAAA,OAAKoB,UAAU,kBAAiBC,SAAER,KAClCM,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACvBrB,EAAAA,EAAAA,KAAA,KAAGsB,KAAML,EAAUG,UAAU,sBAAqBC,UAC9CrB,EAAAA,EAAAA,KAAA,OAAKoB,UAAU,QAAOC,SAAC,gBAE3BrB,EAAAA,EAAAA,KAAA,KAAGsB,KAAMJ,EAAME,UAAU,2BAA0BC,UAC/CrB,EAAAA,EAAAA,KAAA,OAAKoB,UAAU,QAAOC,SAAC,qBAKvCrB,EAAAA,EAAAA,KAAA,OAAKoB,UAAU,cAAaC,SACvBP,KAELd,EAAAA,EAAAA,KAAA,OAAKoB,UAAU,eAAcC,SAAC,aAC9BF,EAAAA,EAAAA,MAAA,MAAIC,UAAU,oBAAmBC,SAAA,CAC5BqE,EAAO3B,OAAS,EAAI,KAAO,qBAExB2B,EAAOd,KAAI,CAACP,EAAMQ,KACd,KAAIA,EAAI,GACR,OACI7E,EAAAA,EAAAA,KAAA,MAAYoB,UAAU,oBAAmBC,SACpCgD,EAAKxD,MADDgE,EAEJ,SAKtB,EAQX,EAxFkB7B,IACd,MAAOpC,EAAMY,IAAWC,EAAAA,EAAAA,UAAS,OAE3B,QAAEC,EAAO,MAAEC,EAAK,aAAEC,EAAY,WAAEC,IAAeC,EAAAA,EAAAA,MAErDC,EAAAA,EAAAA,YAAU,KACNC,GAAY,GACb,CAACgB,EAAM2C,SAEV,MAAM3D,EAAaA,KACf,MAAM,OAAE2D,GAAW3C,EACd2C,IAIL9D,IACAD,EAAa+D,GACRlD,KAAKL,GAAa,EAGrBA,EAAgBxB,IAClBY,EAAQZ,EAAK,EAGXgF,EAAWhF,GAAQc,GAAWC,EAAQ,MAAO3B,EAAAA,EAAAA,KAACwF,EAAQ,IACtD9C,EAAef,GAAQ3B,EAAAA,EAAAA,KAACD,EAAAA,EAAY,IAAM,KAC1C4C,EAAUjB,GAAU1B,EAAAA,EAAAA,KAAC4C,EAAAA,EAAO,IAAM,KAClCC,EAAYnB,GAAWC,IAAUf,EAA+B,MAAvBZ,EAAAA,EAAAA,KAACU,EAAI,CAACE,KAAMA,IAE3D,OACIO,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,CACtBuE,EACAlD,EACAC,EACAE,IACC,ECzCd,MAAMgD,UAAsBC,EAAAA,UAAUC,WAAAA,GAAA,SAAAC,WAAA,KAClCC,MAAQ,CACJtE,OAAO,EACV,CAEDuE,iBAAAA,CAAkBvE,EAAOwE,GACrBC,KAAKC,SAAS,CACV1E,OAAO,GAEf,CAEA2E,MAAAA,GACI,OAAIF,KAAKH,MAAMtE,OACJ3B,EAAAA,EAAAA,KAACD,EAAAA,EAAY,IAEjBqG,KAAKpD,MAAM3B,QACtB,EAGJ,U,qDCUA,EAzBiBkF,KACb,MAAOC,EAAchF,IAAWC,EAAAA,EAAAA,UAAS,MAMzC,OACIN,EAAAA,EAAAA,MAAAsE,EAAAA,SAAA,CAAApE,SAAA,EACIrB,EAAAA,EAAAA,KAAC6F,EAAa,CAAAxE,UACVrB,EAAAA,EAAAA,KAACuB,EAAU,OAEfJ,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC1BrB,EAAAA,EAAAA,KAAC6F,EAAa,CAAAxE,UACVrB,EAAAA,EAAAA,KAACyG,EAAQ,CAACvB,eAXF7C,IACpBb,EAAQa,EAAG,OAYHrC,EAAAA,EAAAA,KAAC6F,EAAa,CAAAxE,UACVrB,EAAAA,EAAAA,KAAC0G,EAAQ,CAACf,OAAQa,UAG1BxG,EAAAA,EAAAA,KAAA,OAAKoB,UAAU,gBAAgBb,IAAKoG,EAAYlG,IAAI,aACrD,C,6CC1BJ,MCkFP,EAlFyBqB,KACrB,MAAM,QAAEJ,EAAO,QAAEkF,EAAO,MAAEjF,EAAK,WAAEE,GDDdgF,MACnB,MAAOnF,EAASoF,IAAcrF,EAAAA,EAAAA,WAAS,IAChCE,EAAOoF,IAAYtF,EAAAA,EAAAA,UAAS,MA0BnC,MAAO,CAAEC,UAASkF,SAxBFI,EAAAA,EAAAA,cAAYC,eAAOC,GAI7B,IAHFC,EAAMnB,UAAAjC,OAAA,QAAAqD,IAAApB,UAAA,GAAAA,UAAA,GAAG,MACTqB,EAAIrB,UAAAjC,OAAA,QAAAqD,IAAApB,UAAA,GAAAA,UAAA,GAAG,KACPsB,EAAOtB,UAAAjC,OAAA,QAAAqD,IAAApB,UAAA,GAAAA,UAAA,GAAG,CAAE,eAAgB,oBAE5Bc,GAAW,GACX,IACI,MAAMS,QAAiBC,MAAMN,EAAK,CAAEC,SAAQE,OAAMC,YAClD,IAAKC,EAASE,GACV,MAAM,IAAIC,MAAM,mBAADC,OAAoBT,EAAG,cAAAS,OAAaJ,EAASK,SAEhE,MAAMC,QAAaN,EAASO,OAG5B,OADAhB,GAAW,GACJe,CACX,CAAE,MAAOzC,GAGL,MAFA0B,GAAW,GACXC,EAAS3B,EAAE2C,SACL3C,CACV,CACJ,GAAG,IAIwBzD,QAAOE,YAFfmF,EAAAA,EAAAA,cAAY,IAAMD,EAAS,OAAO,IAEP,EC3BEF,GAE1CmB,EAAW,4CACXC,EAAU,0CA4BVC,EAAuBtH,IACzB,IAAII,EAAkB,CAClBX,UAAW,SAOf,MAJgB,wBADFO,EAAKG,UAAUoH,KAAKC,MAAMxH,EAAKG,UAAUoH,KAAKE,YAAY,KAAO,KAE3ErH,EAAgBX,UAAY,WAGzB,CACHgC,GAAIzB,EAAKyB,GACTxB,KAAMD,EAAKC,KACXC,YAAaF,EAAKE,YAAW,GAAA6G,OAAM/G,EAAKE,YAAYsH,MAAM,EAAG,KAAI,OAAQ,6CACzErH,UAAWH,EAAKG,UAAUoH,KAAO,IAAMvH,EAAKG,UAAUuH,UACtDtH,gBAAiBA,EACjBC,SAAUL,EAAK2H,KAAK,GAAGrB,IACvBhG,KAAMN,EAAK2H,KAAK,GAAGrB,IACnBxB,OAAQ9E,EAAK8E,OAAOhB,MACvB,EAGC8D,EAAoB9C,IAAY,IAAD+C,EACjC,MAAO,CACHpG,GAAIqD,EAAOrD,GACXqG,MAAOhD,EAAOgD,MACd5H,YAAa4E,EAAO5E,YAAW,GAAA6G,OACtBjC,EAAO5E,YAAYsH,MAAM,EAAG,KAAI,OACnC,0CACNO,UAAWjD,EAAOiD,UAAS,GAAAhB,OAClBjC,EAAOiD,UAAS,OACnB,2CACN5H,UAAW2E,EAAO3E,UAAUoH,KAAO,IAAMzC,EAAO3E,UAAUuH,UAC1DM,UAA+B,QAArBH,EAAA/C,EAAOmD,YAAY,UAAE,IAAAJ,OAAA,EAArBA,EAAuBG,WAAY,QAC7CE,MAAOpD,EAAOqD,OAAO,GAAGD,MAAK,GAAAnB,OACpBjC,EAAOqD,OAAO,GAAGD,MAAK,KACzB,gBACT,EAGL,MAAO,CACHpH,UACAC,QACAE,aACA4B,iBApEqBwD,iBAAiC,IAA1B5D,EAAM2C,UAAAjC,OAAA,QAAAqD,IAAApB,UAAA,GAAAA,UAAA,GAFlB,IAIhB,aADkBY,EAAQ,GAADe,OAAIK,EAAQ,8BAAAL,OAA6BtE,EAAM,KAAAsE,OAAIM,KACjEJ,KAAKmB,QAAQpE,IAAIsD,EAChC,EAkEItG,aAhEiBqF,UACjB,MAAMgC,QAAYrC,EAAQ,GAADe,OAAIK,EAAQ,eAAAL,OAActF,EAAE,KAAAsF,OAAIM,IACzD,OAAOC,EAAoBe,EAAIpB,KAAKmB,QAAQ,GAAG,EA+D/CE,aA5DiBjC,iBAAuB,IAAhB5D,EAAM2C,UAAAjC,OAAA,QAAAqD,IAAApB,UAAA,GAAAA,UAAA,GAAG,EAEjC,aADkBY,EAAQ,GAADe,OAAIK,EAAQ,0BAAAL,OAAyBtE,EAAM,KAAAsE,OAAIM,KAC7DJ,KAAKmB,QAAQpE,IAAI4D,EAChC,EA0DIW,SAxDalC,UACb,MAAMgC,QAAYrC,EAAQ,GAADe,OAAIK,EAAQ,WAAAL,OAAUtF,EAAE,KAAAsF,OAAIM,IACrD,OAAOO,EAAiBS,EAAIpB,KAAKmB,QAAQ,GAAG,EAuD/C,C","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","hooks/http.hook.js","components/services/MarvelService.js"],"sourcesContent":["import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\", objectFit: 'contain', margin: \"0 auto\" }} src={img} alt=\"Error\" />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useState, useEffect, useRef } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n    const [char, setChar] = useState({});\n    const { loading, error, getCharacter, clearError } = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n    }, []);\n\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded);\n    }\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"randomchar\" >\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br />\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n            </div>\n        </div>\n    )\n}\n\nconst View = ({ char }) => {\n    const { name, description, thumbnail, thumbnailStyles, homepage, wiki } = char;\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} style={thumbnailStyles} alt=\"Random character\" className=\"randomchar__img\" />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../services/MarvelService';\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const { loading, error, getAllCharacters } = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);;\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newCharList]);\n\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            let imgStyle = { 'objectFit': 'cover' };\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = { 'objectFit': 'unset' };\n            }\n\n            return (\n                <li\n                    className=\"char__item\"\n                    tabIndex={0}\n                    ref={el => itemRefs.current[i] = el}\n                    key={item.id}\n                    onClick={() => {\n                        props.onCharSelected(item.id);\n                        focusOnItem(i);\n                    }}\n                    onKeyPress={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }\n                    }}>\n                    <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n                    <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    const items = renderItems(charList);\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading && !newItemLoading ? <Spinner /> : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button\n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{ 'display': charEnded ? 'none' : 'block' }}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport useMarvelService from '../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n    const [char, setChar] = useState(null);\n\n    const { loading, error, getCharacter, clearError } = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId]);\n\n    const updateChar = () => {\n        const { charId } = props;\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded);\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const skeleton = char || loading || error ? null : <Skeleton />;\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"char__info\" >\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n\n}\n\nconst View = ({ char }) => {\n    const { name, description, thumbnail, homepage, wiki, comics } = char;\n    let imgStyle = { 'objectFit': 'cover' };\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = { 'objectFit': 'unset' };\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle} />\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics'}\n                {\n                    comics.map((item, i) => {\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage />\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import { useState } from \"react\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ErrorBoundary>\r\n                <RandomChar />\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected} />\r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                    <CharInfo charId={selectedChar} />\r\n                </ErrorBoundary>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","import { useState, useCallback } from 'react';\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url,\r\n        method = 'GET',\r\n        body = null,\r\n        headers = { 'Content-Type': 'applycation/json' }\r\n    ) => {\r\n        setLoading(true);\r\n        try {\r\n            const response = await fetch(url, { method, body, headers });\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n        } catch (e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), [])\r\n\r\n    return { loading, request, error, clearError }\r\n}","import { useHttp } from \"../../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const { loading, request, error, clearError } = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _appKey = 'apikey=' + process.env.REACT_APP_API_MARVEL_DB;\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_appKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_appKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_appKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_appKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    };\r\n\r\n    const getTotalCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=1&offset=1&${_appKey}`);\r\n        return res.data.total;\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        let thumbnailStyles = {\r\n            objectFit: \"cover\"\r\n        },\r\n            nameImg = char.thumbnail.path.slice(char.thumbnail.path.lastIndexOf('/') + 1);\r\n        if (nameImg === 'image_not_available') {\r\n            thumbnailStyles.objectFit = 'contain';\r\n        }\r\n\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            thumbnailStyles: thumbnailStyles,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description\r\n                ? `${comics.description.slice(0, 210)}...`\r\n                : 'There is no description for this comics',\r\n            pageCount: comics.pageCount\r\n                ? `${comics.pageCount} p.`\r\n                : \"No information about the number of pages\",\r\n            thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n            language: comics.textObjects[0]?.language || \"en-us\",\r\n            price: comics.prices[0].price\r\n                ? `${comics.prices[0].price}$`\r\n                : \"not available\"\r\n        }\r\n    }\r\n\r\n    return {\r\n        loading,\r\n        error,\r\n        clearError,\r\n        getAllCharacters,\r\n        getCharacter,\r\n        getAllComics,\r\n        getComic\r\n    }\r\n}\r\n\r\nexport default useMarvelService;"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","char","name","description","thumbnail","thumbnailStyles","homepage","wiki","_jsxs","className","children","href","RandomChar","setChar","useState","loading","error","getCharacter","clearError","useMarvelService","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","imgStyle","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","renderItems","disabled","Skeleton","_Fragment","comics","charId","skeleton","ErrorBoundary","Component","constructor","arguments","state","componentDidCatch","errorInfo","this","setState","render","MainPage","selectedChar","CharList","CharInfo","decoration","request","useHttp","setLoading","setError","useCallback","async","url","method","undefined","body","headers","response","fetch","ok","Error","concat","status","data","json","message","_apiBase","_appKey","_transformCharacter","path","slice","lastIndexOf","extension","urls","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","results","res","getAllComics","getComic"],"sourceRoot":""}